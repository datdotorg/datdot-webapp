const style_sheet = require('support-style-sheet')
const message_maker = require('message-maker')
const make_grid = require('make-grid')
const {i_button} = require('datdot-ui-button')

module.exports = navigation

function navigation ({page = '*', flow = 'ui-navigation', to = '#', name = '.', body = [], theme = {}}, protocol) {
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)
    
    function widget () {
        const role = 'tab'
        const send = protocol(get)
        const el = document.createElement('nav')
        const shadow = el.attachShadow({mode: 'open'})
        const tab_theme = {
            style: `
                i-button[disabled]:hover {
                    border-color: 
                }
            `,
            props: {
                border_width: '1px',
                border_color_hover: 'var(--color-black)'
            }
        }
        el.setAttribute('aria-label', name)
        el.setAttribute('role', 'tablist')
        // !important style_sheet must be implemented before shadow 
        // For Safari and Firefox cannot implement shadow before style
        style_sheet(shadow, style)
        body.forEach( opt => {
            const tab = i_button({page, flow, role, name: opt.name.toLowerCase(), body: opt.body, current: opt.current, disabled: opt.disabled, controls: to, theme: tab_theme}, btn_protocol(opt.name.toLowerCase()))
            shadow.append(tab)
        })
        return el

        function handle_current (to, data) {
            const {name, current} = data
            if (current) return            
            Object.entries(recipients).forEach(([key, value]) => {
                if (key === name) {
                    recipients[name](make({type: 'tab-selected', data: {selected: !current}}))
                    send( make({to, type: 'tab-selected', data: {name}}) )
                    return recipients[name](make({type: 'current', data: !current}))
                }
                recipients[key](make({type: 'tab-selected', data: {selected: current}}))
                return recipients[key](make({type: 'current', data: current}))
            }) 
        }
        function btn_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, refs, meta, data} = msg
            const from = head[0].split(' / ')[0]
            const to = head[1]
            if (type.match(/ready/)) return send(make(msg))
            if (type.match(/current/)) return handle_current(to, data)
        }
    }

    const style = `
    :host(nav) {
        display: grid;
        ${make_grid({
            auto: {
                auto_flow: 'column'
            }
        })}
    }
    `

    return widget()
}