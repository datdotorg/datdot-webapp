const style_sheet = require('support-style-sheet')
const make_grid = require('make-grid')
const message_maker = require('message-maker')
const make_element = require('make-element')
const {i_button} = require('components/datdot-ui-button')
const i_icon = require('components/datdot-ui-icon/src')
const numeral = require('numeral')
const bubble_map = require('components/datdot-ui-bubble-map/src')

module.exports = i_card

function i_card (opt, protocol) {
    const {page = '*', flow = 'ui-card', name = '.', body = null, to = '#', theme} = opt
    const recipients = []
    const make = message_maker(`${name} / ${flow}`)
    const {text = null, account = null, active = false, total = 0, feeds = 0, chunks = 0, size = 0, start = null, end = null, locations = []} = body
    let isActive = active

    function widget () {
        const send = protocol(get)
        const el = make_element({name: 'i-card', classlist: 'card'})
        const shadow = el.attachShadow({mode: 'closed'})
        const header = make_element({name: 'div', classlist: 'card-header'})
        const content = make_element({name: 'div', classlist: 'card-content'})
        const footer = make_element({name: 'div', classlist: 'card-footer'})
        const title = make_element({name: 'h3', classlist: 'title'})
        const title_text = make_element({name: 'span', classlist: 'text'})
        const plan_avatar = i_icon({name: text, path: 'https://avatars.dicebear.com/api/identicon/', is_shadow: true, theme: {props: {size: '16px'}}})
        const user_avatar = i_icon({name: account.name, path: 'https://avatars.dicebear.com/api/bottts/', is_shadow: true, theme: {props: {size: '22px'}} })
        const status = make_element({name: 'span', classlist: `status${isActive ? ' on' : ' off'}`})
        plan_avatar.classList.add('avatar-plan')
        user_avatar.classList.add('avatar-user')
        title_text.innerText = text
        title.append(status, title_text)
        user_avatar.setAttribute('data-address', account.address)
        user_avatar.setAttribute('aria-label', account.name)
        header.append(plan_avatar, title, user_avatar)
        
        style_sheet(shadow, style)
        make_content()
        make_footer()
        shadow.append(header, content, footer)
        send(make({type: 'ready'}))
        el.onclick = () => get_plan_info()
        return el

        function get_plan_info () {
            send( make({type: 'click', data: body} ))
        }

        function make_content () {
            const total_price = make_element({name: 'div', classlist: 'price'})
            const total_feeds = make_element({name: 'div', classlist: 'feeds'})
            const total_chunks = make_element({name: 'div', classlist: 'chunks'})
            const total_size = make_element({name: 'span', classlist: 'size'})
            const price_numeral = numeral(Number(total))
            numeral.defaultFormat('$0,0')
            total_price.textContent = price_numeral.format()
            total_feeds.textContent = `${numeral(Number(feeds)).format('0,0')} feeds`
            total_chunks.textContent = numeral(chunks).format('0.00a').toUpperCase()
            total_size.textContent = `(${numeral(size).format('0.00b').toUpperCase()})`
            total_chunks.append(total_size)
            content.append(total_price, total_feeds, total_chunks)
        }

        function make_footer () {
            const from = make_element({name: 'div', classlist: 'from'}) 
            const to = make_element({name: 'div', classlist: 'to'})
            const location = make_element({name: 'div', classlist: 'location'})
            const map = bubble_map({page, name}, map_protocol(`${name}-map`))
            location.append(map)
            make_calendar(from, start)
            make_calendar(to, end)
            footer.append(from, location, to)
        }

        function make_calendar (element, timestamp) {
            const {year, month, date, time} = timestamp
            const add_year = make_element({name: 'span', classlist: 'year'})
            const add_month_date = make_element({name: 'span', classlist: 'month'})
            const add_time = make_element({name: 'span', classlist: 'time'})
            add_year.textContent = year
            add_month_date.textContent = `${month} ${date}`
            add_time.textContent = time
            element.append(add_year, add_month_date, add_time)
        }

        function map_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }

        function get (msg) {
            
        }
    }

    const style = `
    :host(i-card) {
        display: grid;
        grid-template-rows: 30px 1fr 50px;
        gap: 8px;
        background-color: hsl(var(--color-white));
        border: 1px solid hsl(var(--color-black));
        cursor: pointer;
    }
    /* Card Header */
    .card-header {
        display: grid;
        grid-template-columns: 35px 1fr 30px;
        gap: 0;
        align-items: center;
        background-color: hsl(var(--color-greyF2));
        
    }
    .title {
        display: grid;
        grid-auto-flow: column;
        align-items: center;
        gap: 4px;
        margin: 0;
        text-align: center;
    }
    .text {
        font-size: var(--size16);
        font-weight: 300;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .status {
        display: inline-block;
        width: 8px;
        height: 8px;
    }
    .on {
        background-color: hsl(var(--color-slimy-green));
    }
    .off {
        background-color: hsl(var(--color-grey88));
    }
    .avatar-plan {
        display: grid;
        align-items: center;
        justify-items: center;
        width: 20px;
        height: 20px;
        padding: 4px;
        border-radius: 50px;
        background-color: hsl(var(--color-white));
    }
    .avatar-user {
        display: grid;
        justify-items: center;
        align-items: center;
        width: 30px;
        height: 30px;
        background-color: hsla(var(--color-white), 0.2);
    }
    /* Card Content */
    .card-content {
        text-align: center;
    }
    .card-content > * {
        font-size: var(--size14);
    }
    
    .price {
        font-size: var(--size18);
        font-weight: 600;
    }
    .feeds {
        padding: 4px 0 2px 0;
    }
    .size {
        display: inline-block;
        padding: 0 2px;
    }
    /* Card Footer */
    .card-footer {
        display: grid;
        grid-template-columns: 45px 1fr 45px;
        grid-template-areas: "from location to";
    }
    .card-footer > * {
        font-size: var(--size12);
    }
    .from {
        grid-area: from;
        display: flex;
        flex-direction: column;
        text-align: center;
    }
    .year {
        font-size: var(--size15);
    }
    .month {
        font-weight: 600;
    }
    .to {
        grid-area: to;
        display: flex;
        flex-direction: column;
        text-align: center;
    }
    .location {
        grid-area: location;
    }
    `
    return widget()
}