const max = '999999999999999.999999999999999'
const min = '-999999999999999.999999999999999'
const step = '1982.0000000000005'

const [M1, M2] = max.split('.') 
const [m1, m2] = min.split('.')
const [s1 = '0', s2 = '0'] = step.split('.')
const [S1, S2] = [`${BigInt(s1)}`, `${BigInt(s2)}`]
console.log({s1, s2, S1, S2})

function increase (value) {
    const [int1 = '0', fra1 = '0'] = value.split('.')
    console.log('get int=integer and fra=fraction', {int1,fra1})
  
    if (BigInt(int1) > BigInt(M1) ) return max
    if (BigInt(int1) === BigInt(M1) && BigInt(fra1) > BigInt(M2)) return max
    if (BigInt(int1) < BigInt(m1)) return min
    if (BigInt(int1) === BigInt(m1) && BigInt(fra1) < BigInt(m2))  return min
  
    const [int2, fra2] = [`${BigInt(int1)}`, `${BigInt(fra1)}`]
    console.log('trim away leading zeros', {int2,fra2})
  
    const diff = s2.length - fra1.length
    const suffix = ''.padStart(Math.abs(diff), '0')
    console.log({diff, suffix})
    const _fra2 = (diff > 0) ? fra2 + suffix : fra2
    const _s2 = (diff < 0) ? S2 + suffix : S2
    console.log('make fractions equivalent', {_fra2, _s2})
  
    const [vint1, vfra1] = [`${BigInt(int2) + BigInt(s1)}`, `${BigInt(_fra2) + BigInt(_s2)}`]
    console.log({vint1, vfra1})
  
    const len = _fra2.length < _s2.length ? _s2.length : _fra2.length
    const _vfra1 = len > vfra1.length ? ''.padStart(len - vfra1.length, '0') + vfra1 : vfra1
    const _vint1 = vint1
    console.log('add back leading zeros', { _vint1, _vfra1})
  
    const prefix = ''.padStart(fra1.length - fra2.length, '0')
    const carryover = (vfra1.length - (_fra2.length - fra2.length)) - fra2.length
    const digits = carryover - prefix.length
    console.log({ prefix, carryover, digits })
    const vint2 = (digits > 0) ? `${BigInt(vint1) + BigInt(_vfra1.slice(0, carryover))}` : vint1
    const vfra2 = (digits > 0) ? prefix + _vfra1.slice(carryover) : prefix.slice(0, -digits) + _vfra1
    const _vfra2 = vfra2.replace(/\.*0+$/,'') || '0' // remove trailing "0"s
    console.log('add carryover to integer & remove trailing zeros from fraction', {vint2, vfra2})
  
    const new_value = `${vint2}.${_vfra2}`
    console.log('make new value', { value, new_value })
    return new_value
  }
  
  function test (value) { console.log({value, new_value: increase(value) }) }
  
  const values = [
    '1.002',
    '1.002000005',
    '1.999999999',
    '2.000000004',
    '1.000000005',
    '1.0000000005',
    '1.000999995',
    '1.000999994',
    '1.000999996',
    '2.0',
    '100283473.23094279407239',
    '-0.0388434',
    '-2384230473272.203827160000000001'
  ]
  values.forEach(test)


// // ----------------------------
// // 1. if you have
// var str = `00001`
// var num = BigInt(str) // num = 1
// // you can do:
// var len = str.length // 5
// var pad = `${num}`.padStart(len, '0') // => 00001

// // ----------------------------
// // 2. if you have
// var [a1, b1] = ['1', '895']
// var [a2, b2] = ['0', '106']
// var [a, b] = [`${BigInt(a1) + BigInt(a2)}`, `${BigInt(b1) + BigInt(b2)}`] // will make [a='1', b='1001']
// // you can do:
// if (b.length > b1.length) {
//   const offset = b2.length - b1.length // 4 - 3 = 1
//   var [_a, _b] = [b.slice(0, offset), str.slice(offset)] // ['1', '001']
//   a += _a
//   b = _b
// }
// // if (b1.length < b.length) b1 = b1.padStart(len, '0')
// var new_value = `${a}.${b}` // will make '2.001'

// // ----------------------------
// // 3. if you have
// var [a1, b1] = ['1', '995']
// var [a2, b2] = ['0', '1006']
// // PROBLEM:
// var [a, b] = [`${BigInt(a1) + BigInt(a2)}`, `${BigInt(b1) + BigInt(b2)}`] // will make [a='1', b='2001'] <= wich is bad..., but:
// // you can do:
// var len1 = b1.length
// var len2 = b2.length
// if (len1 < len2) b1 = b1.padEnd(len2 - len1, '0') // b1 = 1006
// if (len1 > len2) b2 = b2.padEnd(len1 - len2, '0') // b2 = 9950 // which makes b1 and b2 the same length
// var [a, b] = [`${BigInt(a1) + BigInt(a2)}`, `${BigInt(b1) + BigInt(b2)}`] // will make [a='1', b='10956'] <= which we need to impove:
// // and then (like above)
// if (b.length > b1.length) {
//   const offset = b.length - b1.length // 5 - 4 = 1
//   var [_a, _b] = [b.slice(0, offset), str.slice(offset)] // will make [_a='1', _b='0956']
//   a = `${BigInt(a) + BigInt(_a)}` // '2'
//   b = _b // '0956'
// }
// // if (b1.length < b.length) b1 = b1.padStart(len, '0')
// var new_value = `${a}.${b}` // will make '2.0956'