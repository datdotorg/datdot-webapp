const style_sheet = require('../../../support-style-sheet')
const message_maker = require('../../../message-maker')
const make_grid = require('../../../make-grid')
const make_element = require('../../../make-element')
const {i_button} = require('../../datdot-ui-button/src')
const L = require('leaflet')
const markerClusterGroup = require('Leaflet.markercluster')
const leaflet_css = require('./node_modules/leaflet.css')
const marker_cluster_css = require('./node_modules/marker-cluster.default.css.js')

module.exports = bubble_map

function bubble_map (opt, protocol) {
    const {page = '*', flow = 'ui-bubble-map', name = '.', body = undefined, hide = false, to = '#' } = opt
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)
    let hidden = hide

    function widget () {
        const send = protocol(get)
        const el = make_element({name: 'div', classlist: 'map'})
        const shadow = el.attachShadow({mode: 'closed'})
        const mapid = make_element({name: 'div'})
        mapid.setAttribute('id', 'mapid')
        shadow.append(mapid)

        style_sheet(shadow, style)

        const addressPoints = [
            // USA
            [45.517793, -122.743197, "60"],
            [40.688969, -73.843231, "450"],
            [38.874615, -77.051339, "22"],
            [32.763595, -96.878911, "1000"],
            [33.896294, -118.164292, "2500"],
            [30.347266, -81.680999, "88"],
            // UK
            [51.51753, -0.11214 , "1000"],
            [51.496454, -0.135243, "80"],
            [51.522416, -0.033302, "15"],
            [51.754199, -1.279829, "600"],
            [52.197225, 0.107006, "800"],
            [53.315853, -4.405788, "15"],
            // Europe
            [48.786082, 2.406824, "20"],
            [44.886682, 3.670764, "12"],
            [43.574425, 7.015255, "1"],
            [43.730433, 7.409865, "3"],
            [43.581379, 7.11119, "20"],
            // Australia
            [-37.8210922667, 175.2209316333, "2"],
            [-37.8210819833, 175.2213903167, "3"],
            [-37.8210881833, 175.2215004833, "34"],
            [-37.8211946833, 175.2213655333, "1"],
            [-37.8209458667, 175.2214051333, "5"],
            [-37.8208292333, 175.2214374833, "7"],
            [-37.8325816, 175.2238798667, "537"],
            [-37.8315855167, 175.2279767, "454"],
            [-37.8096336833, 175.2223743833, "176"],
            [-37.80970685, 175.2221815833, "178"],
            [-37.8102146667, 175.2211562833, "190"],
            [-37.8088037167, 175.2242227, "156"],
            [-37.8112330167, 175.2193425667, "210"],
            [-37.8116368667, 175.2193005167, "212"],
            [-37.80812645, 175.2255449333, "146"],
            [-37.8080231333, 175.2286383167, "125"],
            [-37.8089538667, 175.2222222333, "174"],
            [-37.8080905833, 175.2275400667, "129"]
          ]

        // L.map(<HTMLElement> el or #id).setView([x,y], zoom)
        const map = L.map(mapid, {
            center: [-10.82, 105.23],
            zoom: 2,
            // default is true to support scrollWheelZoom
            scrollWheelZoom: false,
            // default is true to support double click on map to zoom in
            doubleClickZoom: false,
            // use Shift + mouse left to draw a rectangle area and go to see area
            boxZoom: true,
            keyboardPanOffset: 80,
            // default 1 to zoom map
            keyboardZoomOffset: 1,
        })
        // longitude(Y), latitude(X)
        // .setView([-37.82, 175.23], 12)

        // copyright for leaflet.js and OpenStreetMap must be shown on the page
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map)

        // --- start --- custom icon
        L.Icon.Default.imagePath = "src/assets"
        const LeafIcon = L.Icon.extend({
            options: {
            shadowUrl: `${L.Icon.Default.imagePath}/flag-shadow.svg`,
               iconSize:     [25, 32],
               shadowSize:   [25, 32],
               iconAnchor:   [22, 94],
               shadowAnchor: [22, 94],
               popupAnchor:  [-10, -100]
            }
        })

        const maker_icon = new LeafIcon({
            iconUrl: `${L.Icon.Default.imagePath}/flag.svg`,
        })

        // L.marker([51.5, -0.09], {icon: maker_icon }).addTo(map)
        // .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
        // .openPopup()
        //  --- end --- custom icon

        const markers = L.markerClusterGroup()
        addressPoints.forEach( point => {
            const a = point
            const [x, y, title] = a
            const marker = L.marker(new L.LatLng(x, y), {icon: maker_icon }, {title})
            marker.bindPopup(title)
            markers.addLayer(marker)
        })

        map.addLayer(markers)

        // set popup on map
        map.on('click', onMapClick)
        const popup = L.popup()
        function onMapClick (e) {
            popup
            .setLatLng(e.latlng)
            .setContent("You clicked the map at " + e.latlng.toString())
            .openOn(map);
        }
     

        // dont put here, it is not worked.
        // map.invalidateSize();

        // invalidateSize() only worked when DOMContentLoaded to accurate for correct map size
        document.addEventListener('DOMContentLoaded', () => {
            map.invalidateSize();
        })
        
        
        return el

        function get (msg) {

        }

    }

    const style = `
    :host(.map) {
        --bg-color: var(--color-white);
        --opacity: 1;
        --border-width: 1px;
        --border-style: solid;
        --border-color: var(--color-black);
        height: 100%;
    }
    :host(.map[aria-hidden="true"]) {
        display: none;
    }
    :host(.map[aria-hidden="false"]) {
    }
    #mapid {
        width: 100%;
        height: 100%;
    }
    ${leaflet_css}
    ${marker_cluster_css}
    `

    return widget()
}