const style_sheet = require('../../../support-style-sheet')
const message_maker = require('../../../message-maker')
const make_grid = require('../../../make-grid')
const make_element = require('../../../make-element')
const {i_button} = require('datdot-ui-button')
const L = require('leaflet')
const markerClusterGroup = require('Leaflet.markercluster')
const leaflet_css = require('./node_modules/leaflet.css')

module.exports = bubble_map

function bubble_map (opt, protocol) {
    const {page = '*', flow = 'ui-bubble-map', name = '.', body = undefined, hide = false, to = '#' } = opt
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)
    let hidden = hide

    function widget () {
        const send = protocol(get)
        const el = make_element({name: 'div', classlist: 'map'})
        const shadow = el.attachShadow({mode: 'closed'})
        const mapid = make_element({name: 'div'})
        mapid.setAttribute('id', 'mapid')
        shadow.append(mapid)

        style_sheet(shadow, style)

        const L_map = L.map(mapid).setView([-50, -0.09], 4);

        L.Icon.Default.imagePath = "src/assets"
        const LeafIcon = L.Icon.extend({
            options: {
            shadowUrl: `${L.Icon.Default.imagePath}/maker-shadow.png`,
               iconSize:     [36, 60],
               shadowSize:   [50, 64],
               iconAnchor:   [22, 94],
               shadowAnchor: [22, 94],
               popupAnchor:  [-50, -90]
            }
        });

        const maker_icon = new LeafIcon({
            iconUrl: `${L.Icon.Default.imagePath}/maker-icon.png`,
            
        })
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(L_map)

        L.marker([51.5, -0.09], {icon: maker_icon }).addTo(L_map)
        .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
        .openPopup()

        
        // dont put here, it is not worked.
        // L_map.invalidateSize();

        // invalidateSize() only worked when DOMContentLoaded to accurate for correct map size
        document.addEventListener('DOMContentLoaded', () => {
            L_map.invalidateSize();
        })
        
        
        return el

        function get (msg) {

        }

    }

    const style = `
    :host(.map) {
        --bg-color: var(--color-white);
        --opacity: 1;
        --border-width: 1px;
        --border-style: solid;
        --border-color: var(--color-black);
        height: 100%;
    }
    :host(.map[aria-hidden="true"]) {
        display: none;
    }
    :host(.map[aria-hidden="false"]) {
    }
    #mapid {
        width: 100%;
        height: 100%;
    }
    ${leaflet_css}
    `

    return widget()
}