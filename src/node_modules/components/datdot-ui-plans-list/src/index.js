const style_sheet = require('support-style-sheet')
const message_maker = require('message-maker')
const make_grid = require('make-grid')
const make_element = require('make-element')
const i_card = require('components/datdot-ui-card/src')

module.exports = plan_card
function plan_card (opt, protocol) {
    const {page = '*', flow = "ui-plan-card", name = ".", body = [], to = '#'} = opt
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)

    function widget () {
        const send = protocol(get)
        const el = make_element({name: 'div', classlist: 'plans-list'})
        const shadow = el.attachShadow({mode: 'closed'})
        const list = make_element({name: 'div', classlist: 'list'})
        const card = i_card({
            name: 'plan1', 
            body: {
                text: 'block1111111111111111122222222',
                account: {
                    name: 'account1',
                    address: '0x288e86504a82c93c85b208a23ed9ff6f423e966f1c5c87f7b367378bed0430479'
                },
                active: true,
                total: '86720000',
                feeds: '1990506',
                chunks: '1260000',
                size: '3467479682787',
                start: {
                    year: '2021',
                    month: 'JAN',
                    date: '28',
                    time: '00:00'
                },
                end: {
                    year: '2021',
                    month: 'FEB',
                    date: '08',
                    time: '00:00'
                },
                locations: []
            },
            to: 'wallet-footer',
        }, card_protocol('plan1'))
        style_sheet(shadow, style)

        for (let i = 0; i < 15; i++) {
            list.append(make_card(i))
        }
        
        shadow.append(list)
        send(make({type: 'ready'}))

        return el

        function make_card (i) {
            return i_card({
                name: `plan${i}`, 
                body: {
                    text: 'block1111111111111111122222222',
                    account: {
                        name: `account${i}`,
                        address: '0x288e86504a82c93c85b208a23ed9ff6f423e966f1c5c87f7b367378bed0430479'
                    },
                    active: true,
                    total: '86720000',
                    feeds: '1990506',
                    chunks: '1260000',
                    size: '3467479682787',
                    start: {
                        year: '2021',
                        month: 'JAN',
                        date: '28',
                        time: '00:00'
                    },
                    end: {
                        year: '2021',
                        month: 'FEB',
                        date: '08',
                        time: '00:00'
                    },
                    locations: []
                },
                to: 'wallet-footer',
            }, card_protocol(`plan${i}`))
        }

        function card_protocol (name) {
            return send => {
                recipients[name] = send
                return card_get
            }
        }

        function card_get (msg) {
            const {head, type, refs, meta, data } = msg
            const from = head[0].split(' / ')[0]
            const flow = head[0].split(' / ')[1]
            const make = message_maker(`${from} / ${flow} / ${page}`)
            if (type === 'ready') return send(make(msg))
            if (type === 'click') return send(make(msg))
        }

        function get (msg) {
            const {head, type, refs, meta, data } = msg
            
        }
    }

    const style = `
    :host(.plans-list) {
        position: relative;
        z-index: 1;
        display: grid;
        background-color: hsl(var(--color-white));
        padding: 10px 20px;
        overflow: hidden scroll;
        height: 100%;
    }
    .list {
        display: grid;
        grid-template-rows: repeat(auto-fill, minmax(0, 158px));
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 10px;
    }
    `

    return widget()
}