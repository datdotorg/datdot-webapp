const style_sheet = require('support-style-sheet')
const message_maker = require('message-maker')
const {i_button} = require('datdot-ui-button')
const make_grid = require('../make-grid')

module.exports = i_actions
function i_actions({page = '*', flow = 'ui-actions', name, body = [], to = '#'}, protocol) {
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)

    function widget () {
        const send = protocol(get)
        const el = document.createElement('i-actions')
        const shadow = el.attachShadow({mode: 'closed'})
        const main_action = document.createElement('div')
        const plans_action = document.createElement('div')
        const search_action = document.createElement('div')
        const plan_action = document.createElement('div')
        const main_option = [
            {name: 'account', hide: true},
            {name: 'activity', hide: false}
        ]
        const plans_option =  [
            {name: 'plan-list', role: 'switch', checked: true},
            {name: 'map', role: 'switch', checked: true},
            {name: 'linechart', role: 'switch', checked: true},
        ]
        const search_option = [
            {name: 'search', role: 'switch', checked: false},
            {name: 'sort-up', role: 'switch', checked: false},
            {name: 'sort-down', role: 'switch', checked: true},
            {name: 'filter', role: 'switch', checked: false},
        ]

        const plan_option = [
            {name: 'play', role: 'switch', checked: true},
            {name: 'pause', role: 'switch', checked: false},
            {name: 'edit', role: 'button'},
            {name: 'trash', role: 'button'}
        ]

        main_option.forEach( obj => {
            if (obj.hide) return
            const button = i_button({page, name: obj.name, icons: {icon: {name: obj.name}}}, actions_protocol(obj.name))
            main_action.append(button)
        })

        plans_option.forEach( obj => {
            const button = i_button({page, name: obj.name, role: obj.role, icons: {icon: {name: obj.name}}, checked: obj.checked}, actions_protocol(obj.name))
            plans_action.append(button)
        })

        search_option.forEach( obj => {
            const button = i_button({page, name: obj.name, role: obj.role, icons: {icon: {name: obj.name}}, checked: obj.checked}, actions_protocol(obj.name))
            search_action.append(button)
        })

        plan_option.forEach( obj => {
            const button = i_button({page, name: obj.name, role: obj.role, icons: {icon: {name: obj.name}}, checked: obj.checked}, actions_protocol(obj.name))
            plan_action.append(button)
        })

        // console.log(first_action, second_action)
        // !important style_sheet must be implemented before shadow 
        // For Safari and Firefox cannot implement shadow before style
        style_sheet(shadow, style)
        shadow.append(main_action, plans_action, search_action, plan_action)
        return el

        function actions_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, refs, meta, data} = msg
            const from = head[0].split(' / ')[0]
            send(make(msg))
            if (type.match(/load-page/)) return console.log(msg)
        }
    }

    const style = `
    :host(i-actions) {
        --bg-color: var(--color-white);
        display: grid;
        ${make_grid({
            columns: 'repeat(auto-fill, minmax(0, auto))',
            auto: {
                auto_flow: 'column'
            }
        })}
        background-color: hsl(var(--bg-color));
    }
    `
    return widget()
}
