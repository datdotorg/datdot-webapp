const style_sheet = require('support-style-sheet')
const message_maker = require('message-maker')
const {i_button} = require('datdot-ui-button')
const make_grid = require('../make-grid')

module.exports = i_actions
function i_actions({page = '*', flow = 'ui-actions', name, body = [], to = '#'}, protocol) {
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)

    function widget () {
        const send = protocol(get)
        const el = document.createElement('i-actions')
        const shadow = el.attachShadow({mode: 'open'})
        const plans_option = [
            'activity', 
            ['plan-list', 'map', 'linechart'],
            ['search', 'sort-up', 'sort-down', 'filter'],
            ['play', 'pause', 'edit', 'remove']
        ]
        const action1 = document.createElement('div')
        const action2 = document.createElement('div')
        const actions = plans_option.forEach( (item, index) => {
            if (typeof item === 'string') {
                return action1.append( 
                i_button({
                    name: `${item}-action`, 
                    icons: {icon: {name: item}}, 
                    theme: {
                        props: {
                            border_radius: '0',
                        }
                    }
                }, actions_protocol(`${item}-action`)) )
            }
            if (typeof item === 'object') {
                return item.forEach( name => {
                    action2.append( 
                        i_button({
                            name: `${name}-action`, 
                            icons: {icon: {name}}, 
                            theme: {
                                props: {
                                    border_radius: '0',
                                }
                            }
                    }, actions_protocol(`${name}-action`)) )
                })
            }
        })

        // console.log(first_action, second_action)
        // !important style_sheet must be implemented before shadow 
        // For Safari and Firefox cannot implement shadow before style
        style_sheet(shadow, style)
        shadow.append(action1, action2)
        return el

        function actions_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, refs, meta, data} = msg
            const from = head[0].split(' / ')[0]
            send(make(msg))
            if (type.match(/load-page/)) return console.log(msg)
        }
    }

    const style = `
    :host(i-actions) {
        --bg-color: var(--color-white);
        display: grid;
        ${make_grid({
            columns: 'repeat(auto-fill, minmax(0, auto))',
            auto: {
                auto_flow: 'column'
            }
        })}
        background-color: hsl(var(--bg-color));
    }
    `
    return widget()
}
