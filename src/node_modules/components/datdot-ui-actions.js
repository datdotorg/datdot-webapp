const style_sheet = require('support-style-sheet')
const message_maker = require('message-maker')
const {i_button} = require('datdot-ui-button')
const make_grid = require('../make-grid')

module.exports = i_actions
function i_actions({page = '*', flow = 'ui-actions', name, body = [], to = '#', status = {}, theme = {}}, protocol) {
    const {activities = 0, plan = undefined} = status
    
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)

    function widget () {
        const send = protocol(get)
        const el = document.createElement('i-actions')
        const shadow = el.attachShadow({mode: 'closed'})
        const list = document.createElement('div')
        // for user account, activities
        const main_action = document.createElement('div')
        // for plans list using
        const plans_action = document.createElement('div')
        // search, sort up/down, filter
        const search_action = document.createElement('div')
        // for each plan using
        const settings_action = document.createElement('div')
        // for each plan using
        const plan_action = document.createElement('div')
        // for activities using
        const activities_event = document.createElement('span')
        const box = document.createElement('div')
        // add class for elements
        list.classList.add('list')
        main_action.className = 'action main'
        settings_action.className = 'action settings'
        plans_action.classList.add('action')
        search_action.classList.add('action')
        plan_action.classList.add('action')
        activities_event.classList.add('badge')
        
        const button_theme = {
            style: `
                :host(i-button[aria-checked="true"]) {
                    background-color: transparent;
                    border-bottom: 2px solid hsl(var(--color-black));
                }
                :host(i-button[aria-checked="true"]) .icon g {
                    --icon-fill: var(--color-black);
                }
                :host(i-button[aria-checked="false"]) .icon g {
                    --icon-fill: var(--color-greyA2);
                }
            `,
            props: {
                border_radius: '0',
                icon_fill_hover: 'var(--color-black)',
                bg_color_hover: 'var(--color-greyED)',
            }
        }
        const main_option = [
            {name: 'account', hide: false},
            {name: 'activity', hide: false}
        ]
        const plans_option =  [
            {name: 'plan-list', role: 'switch', checked: true},
            {name: 'map', role: 'switch', checked: true},
            {name: 'linechart', role: 'switch', checked: true},
        ]
        const search_option = [
            {name: 'search', role: 'switch', checked: false},
            {name: 'sort-up', role: 'switch', checked: false},
            {name: 'sort-down', role: 'switch', checked: true},
            {name: 'filter', role: 'switch', checked: false},
        ]
        const plan_option = [
            {name: 'play', role: 'switch', checked: true},
            {name: 'pause', role: 'switch', checked: false},
            {name: 'edit', role: 'button'},
            {name: 'trash', role: 'button'}
        ]
        const settings_option = [
            {name: 'plus'},
            {name: 'action', role: 'switch', checked: false},
            {name: 'help', role: 'switch', checked: false}
        ]
        
        make_buttons({args: main_option, target: main_action})
        make_buttons({args: settings_option, target: settings_action})
        make_buttons({args: plans_option, target: plans_action})
        make_buttons({args: search_option, target: search_action})
        // only display when click plan
        
        // console.log(first_action, second_action)
        // !important style_sheet must be implemented before shadow 
        // For Safari and Firefox cannot implement shadow before style
        style_sheet(shadow, style)
        shadow.append(main_action)
        if (plans_action) list.append(plans_action)
        if (search_action) list.append(search_action)
        if (plan) {
            make_buttons ({args: plan_option, target: plan_action})
            list.append(plan_action)
        } 
        shadow.append(list)
        shadow.append(settings_action)

        document.addEventListener('DOMContentLoaded', () => {
            // if there is any activites would be dispalying
            if (activities > 0) {
                box.append(activities_event)
                activities_event.textContent = activities
                // make activities_event align center for responsive size
                activities_event.style.marginLeft = `-${activities_event.clientWidth / 2}px`
            }
        })
         
        return el


        function make_buttons ({args, target}) {
            args.forEach( obj => {
                if (obj.hide) return
                if (obj.checked) var checked = {checked: obj.checked}
                const button = i_button({page, name: obj.name, role: obj.role, icons: {icon: {name: obj.name}}, ...checked, theme: button_theme}, actions_protocol(obj.name))
                if (obj.name === 'activity') {
                    box.classList.add('activities')
                    box.append(button)
                    return target.append(box)
                } 
                target.append(button)
            })
        }

        function actions_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, refs, meta, data} = msg
            const from = head[0].split(' / ')[0]
            send(make(msg))
            if (type.match(/load-page/)) return console.log(msg)
        }
    }

    const style = `
    :host(i-actions) {
        --bg-color: var(--color-white);
        display: grid;
        ${make_grid({
            columns: 'auto 1fr auto',
            auto: {
                auto_flow: 'column'
            }
        })}
        background-color: hsl(var(--bg-color));
        border-top: 1px solid hsl(var(--color-black));
    }
    .list {
        display: flex;
        overflow: scroll hidden;
    }
    .action {
        display: grid;
        /* auto fill all buttons */
        ${make_grid({
            columns: 'repeat(auto-fill, minmax(1fr, auto))',
            auto: {
                auto_flow: 'column'
            }
        })}
        gap: 2px;
    }
    .activities {
        position: relative;
    }
    i-button[aria-label="activity"] {
        ${make_grid({
            row: '1',
            column: '2'
        })}
    }
    .badge {
        --color: var(--color-white);
        --size: var(--size12);
        --bg-color: var(--color-black);
        --opacity: 0.6;
        ${make_grid({
            row: '1',
            column: '2'
        })}
        position: absolute;
        transform: scale(0.8);
        bottom: -2px;
        left: 50%;
        z-index: 1;
        font-size: var(--size);
        color: hsl(var(--color));
        text-align: center;
        background-color: hsla(var(--bg-color), var(--opacity));
        padding: 4px 6px;
        border-radius: var(--primary-radius);
    }
    .settings {
        grid-column-end: -1;
    }
    `
    return widget()
}
