const message_maker = require('message-maker')
const make_element = require('make-element')
const style_sheet = require('support-style-sheet')
// widgets
const i_nav = require('components/datdot-ui-navigation/src')
const i_actions = require('components/datdot-ui-actions/src')
// call actions
const account_action = require('./account-action')
const search_action = require('./search-action')
const filter_action = require('./filter-action')
const sort_action = require('./sort-action')
const custom_action = require('./custom-action')

module.exports = i_footer
function i_footer ({page = '*', flow = 'ui-footer', name = '.', body = {}, to = '#'}, protocol) {
    const {nav = {}, accounts = [], status = {}} = body
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)
    
    function widget () {
        const send = protocol(get)
        const el = make_element({name: 'footer', classlist: 'footer'})
        const shadow = el.attachShadow({mode: 'closed'})
        const actions = i_actions( {name: `${name}-actions`, status}, footer_protocol(`${name}-actions`) )
        const navigtaion = i_nav( {name: `${name}-nav`, body: nav, to}, footer_protocol(`${name}-nav`) )
        style_sheet(el, style)
        shadow.append(actions, navigtaion)

        return el

        function handle_close_action_event({type, name, hide}) {
            Object.keys(recipients).forEach( key => {
                const regex = new RegExp(`${name}`)
                if (key.match(regex)) return recipients[`${name}-action`](make({type, data: {hide: !hide}}))
            })
        }
        function handle_open_action_event ({name, type, hide}) {
            if (name === 'planlist') return
            if (name === 'performance') return
            if (name === 'linechart') return
            // check sub-action existed
            if (shadow.querySelector(`.sub-action.${name}`)) {
                Object.keys(recipients).forEach( key => {
                    const regex = new RegExp(`${name}`)
                    if (key.match(regex)) return recipients[`${name}-action`](make({type, data: {hide: !hide}}))
                })
                return 
            }
            // check other sub-action existed and do deleted
            const sub_actions = shadow.querySelectorAll(`.sub-action`)
            const sub_option = ({action, args}) => action({name: `${name}-action`, body: args, hide: !hide}, footer_protocol(`${name}-action`))
            const sub_action =  (name === 'account') ? sub_option({action: account_action, args: accounts})
                                : (name === 'search') ? sub_option({action: search_action})
                                : (name === 'filter') ? sub_option({action: filter_action})
                                : (name.match(/sort/)) ? sub_option({action: sort_action})
                                : (name === 'custom-action') ? sub_option({action: custom_action})
                                : undefined

            if (sub_action) shadow.insertBefore(sub_action, actions)
            if (sub_actions.length > 0) {
                sub_actions.forEach( action => {
                    shadow.removeChild(action)
                })
            }
            return
        }

        // send account changed to ${name}-actions
        function handle_switch_account_event (data) {
            recipients[`${name}-actions`](make({type: 'account-changed', data}))
        }
        function footer_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, refs, meta, data} = msg
            const from = head[0].split(' / ')[0]
            const to = head[1]
            console.log(from, type)
            if (type.match(/ready/)) return send(make(msg))
            if (type.match(/click/)) return send(make(msg))
            if (type.match(/expanded/)) return handle_open_action_event({name: from, type: 'show', hide: data.expanded})
            if (type.match(/collapsed/)) return handle_close_action_event({name: from, type: 'hide', hide: data})
            if (type.match(/tab-selected/)) return send( make({to, type: 'switch-page', data}) )
            if (type.match(/switch-page/)) return send(make(msg))
            if (type.match(/switch-account/)) return handle_switch_account_event(data)
        }
    }
    
    const style = ``

    return widget()
}