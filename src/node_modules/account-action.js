const style_sheet = require('support-style-sheet')
const message_maker = require('message-maker')
const make_grid = require('make-grid')
const make_element = require('make-element')
const {i_button} = require('components/datdot-ui-button')

module.exports = account_actions

function account_actions (opt, protocol) {
    const {page = '*', flow = 'account-action', name = '.', body = [], hide = true, to = '#'} = opt
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)
    let is_hidden = hide

    function widget () {
        const send = protocol(get)
        const el = make_element({name: 'div', classlist: 'sub-action account'})
        const title = make_element({name: 'h5'})
        const shadow = el.attachShadow({mode: 'closed'})
        style_sheet(shadow, style)
        title.textContent = 'account actions'
        shadow.append(title)
        el.setAttribute('aria-hidden', is_hidden)
        send( make({type: 'ready'}) )
        return el

        function set_attr ({aria, prop}) {
            return el.setAttribute(`aria-${aria}`, prop)
        }
        function handle_hide ({hide}) {
            console.log(hide)
            is_hidden = hide
            el.setAttribute('aria-hidden', is_hidden)
        }

        function action_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, refs, meta, data} = msg
            const from = head[0].split(' / ')[0]
            const to = head[1]
            if (type.match(/show|hide/)) return handle_hide(data)
        }
    }

    const style = `
    :host(.sub-action) {
        --bg-color: var(--color-white);
        --opacity: 1;
        --border-width: 1px;
        --border-style: solid;
        --border-color: var(--color-black);
        display: grid;
        background-color: hsla(var(--bg-color), var(--opacity));
        border-top: var(--border-width) var(--border-style) hsl(var(--color-black));
    }
    :host(.sub-action[aria-hidden="true"]) {
        visibility: hidden;
    }
    :host(.sub-action[aria-hidden="false"]) {
        visibility: visible;
    }
    `

    return widget()
}