const style_sheet = require('support-style-sheet')
const message_maker = require('message-maker')
const make_grid = require('make-grid')
const make_element = require('make-element')
const {i_button} = require('components/datdot-ui-button')
const i_list = require('components/datdot-ui-list')

module.exports = account_action

function account_action (opt, protocol) {
    const {page = '*', flow = 'account-action', name = '.', body = [], hide = true, to = '#'} = opt
    const recipients = []
    const make = message_maker(`${name} / ${flow} / ${page}`)
    let is_hidden = hide

    function widget () {
        const send = protocol(get)
        const el = make_element({name: 'div', classlist: 'sub-action account'})
        const title = make_element({name: 'h5'})
        const shadow = el.attachShadow({mode: 'closed'})

        // create/import account
        const main_action = make_element({name: 'div', classlist: 'action main'})
        // transfer, edit, delete
        const current_account_action = make_element({name: 'div', classlist: 'action current-account'})
        // switch account
        const accounts_list_action = make_element({name: 'div', classlist: 'action accounts'})

        const button_theme = {
            style: ``,
            props: {

            }
        }

        const list_theme = {
            style: ``,
            props: {
                
            }
        }

        const main_option = [
            {name: 'create-account', icon: 'plus', role: 'button', controls: 'wallet-container', theme: button_theme},
            {name: 'import-account', icon: 'import', role: 'button', controls: 'wallet-container', theme: button_theme},
        ]

        const current_account_option = [
            {name: 'account-transfer', icon: 'transfer', role: 'button', controls: 'action-panel', current: false, expanded: false, theme: button_theme},
            {name: 'account-edit', icon: 'edit', role: 'button', controls: 'action-panel',  current: false, expanded: false, theme: button_theme},
            {name: 'account-delete', icon: 'trash', role: 'button', controls: 'action-panel',  current: false, expanded: false, theme: button_theme},
        ]


        const accounts_list_option = [
            {
                // text: 'account1',
                icon: {name: 'account'},
                selected: true,
            },
            {
                // text: 'account2',
                icon: {name: 'account'},
                selected: false,
            },
            {
                text: 'account3',
                icon: {name: 'account'},
                selected: false,
            }
        ]
       
        style_sheet(shadow, style)
        set_attr({aria: 'hidden', prop: is_hidden})

        make_buttons({args: main_option, target: main_action})
        make_buttons({args: current_account_option, target: current_account_action})
        
        const accounts_list = i_list({name: 'account-select-list', body: accounts_list_option, mode: 'single-select', hidden: false}, actions_protocol('account-select-list'))

        accounts_list_action.append(accounts_list)

        shadow.append(main_action)

        if (accounts_list_action) shadow.append(current_account_action, accounts_list_action)

        send( make({type: 'ready'}) )
        return el

        function make_buttons ({args, target}) {
            args.forEach( obj => { 
                const expanded = ('expanded' in obj) ? obj.expanded : void 0
                const current = ('current' in obj) ? obj.current : void 0
                const button = i_button({page, name: obj.name, role: obj.role, icons: {icon: {name: obj.icon}}, expanded, current, controls: obj.controls, theme: obj.theme}, actions_protocol(obj.name))
                target.append(button)
            })
        }

        function set_attr ({aria, prop}) {
            return el.setAttribute(`aria-${aria}`, prop)
        }
        function handle_hide ({hide}) {
            is_hidden = hide
            set_attr({aria: 'hidden', prop: is_hidden})
        }
        function actions_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, refs, meta, data} = msg
            const from = head[0].split(' / ')[0]
            const to = head[1]
            if (type.match(/show|hide/)) return handle_hide(data)
        }
    }

    const style = `
    :host(.sub-action) {
        --bg-color: var(--color-white);
        --opacity: 1;
        --border-width: 1px;
        --border-style: solid;
        --border-color: var(--color-black);
        display: grid;
        ${make_grid({
            columns: 'auto 1fr auto',
            auto: {
                auto_flow: 'column'
            }
        })}
        background-color: hsla(var(--bg-color), var(--opacity));
        border-top: var(--border-width) var(--border-style) hsl(var(--color-black));
    }
    :host(.sub-action[aria-hidden="true"]) {
        display: none;
    }
    :host(.sub-action[aria-hidden="false"]) {
    }
    `

    return widget()
}